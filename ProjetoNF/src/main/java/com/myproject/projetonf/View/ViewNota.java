/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.myproject.projetonf.View;

import com.myproject.projetonf.Controller.*;
import com.myproject.projetonf.Model.*;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.table.DefaultTableCellRenderer;

public class ViewNota extends javax.swing.JFrame {

    private final PedidoController pedidoController;
    private final ItemController itemController;
    private final ClienteController clienteController;
    private final ProdutoController produtoController;
    
    private DefaultTableModel tableModel;
    
    public ViewNota() {
        initComponents();
        this.pedidoController = new PedidoController();
        this.itemController = new ItemController();
        this.clienteController = new ClienteController();
        this.produtoController = new ProdutoController();
        configurarComponentes();
        carregarClientesNoCombo();
        configurarDataAutomatica(); 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        txtNomeCliente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnInserirNota = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnRemoverNota = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnAlterarNota = new javax.swing.JButton();
        txtNumeroNota = new javax.swing.JTextField();
        btnConsultarNota = new javax.swing.JButton();
        txtCpfCliente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtEnderecoCliente = new javax.swing.JTextField();
        txtDataNota = new javax.swing.JTextField();
        cmbCodigoCliente = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItensNota = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtQuantidadeProduto = new javax.swing.JTextField();
        txtCodigoProduto = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtCodigoItem = new javax.swing.JTextField();
        btnInserirItem = new javax.swing.JButton();
        btnRemoverItem = new javax.swing.JButton();
        btnAlterarItem = new javax.swing.JButton();
        btnConsultarItem = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        txtTotalNota = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setText("Codigo do cliente");

        txtNomeCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeClienteActionPerformed(evt);
            }
        });

        jLabel4.setText("Endereco");

        btnInserirNota.setText("Inserir");
        btnInserirNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirNotaActionPerformed(evt);
            }
        });

        jLabel5.setText("Nome");

        btnRemoverNota.setText("Remover");
        btnRemoverNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverNotaActionPerformed(evt);
            }
        });

        jLabel6.setText("CPF/CNPJ");

        btnAlterarNota.setText("Alterar");
        btnAlterarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarNotaActionPerformed(evt);
            }
        });

        txtNumeroNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroNotaActionPerformed(evt);
            }
        });

        btnConsultarNota.setText("Consultar");
        btnConsultarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarNotaActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel7.setText("Nota");

        txtEnderecoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEnderecoClienteActionPerformed(evt);
            }
        });

        txtDataNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataNotaActionPerformed(evt);
            }
        });

        cmbCodigoCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCodigoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCodigoClienteActionPerformed(evt);
            }
        });

        jLabel1.setText("Numero Nota");

        jLabel2.setText("Data");

        tblItensNota.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblItensNota);

        jLabel8.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel8.setText("Item");

        jLabel10.setText("Quantidade");

        jLabel11.setText("Codigo do Produto");

        jLabel13.setText("Codigo do Item");

        btnInserirItem.setText("Inserir");
        btnInserirItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirItemActionPerformed(evt);
            }
        });

        btnRemoverItem.setText("Remover");
        btnRemoverItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverItemActionPerformed(evt);
            }
        });

        btnAlterarItem.setText("Alterar");
        btnAlterarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarItemActionPerformed(evt);
            }
        });

        btnConsultarItem.setText("Consultar");
        btnConsultarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarItemActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel14.setText("Total da Nota");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbCodigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addGap(51, 51, 51)
                                            .addComponent(txtCpfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addGap(28, 28, 28)
                                            .addComponent(txtNumeroNota))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addComponent(jLabel5)
                                                .addGap(17, 17, 17))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(18, 18, 18)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtNomeCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                            .addComponent(txtDataNota)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtEnderecoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtCodigoItem, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQuantidadeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCodigoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(btnInserirNota)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoverNota)
                        .addGap(18, 18, 18)
                        .addComponent(btnAlterarNota)
                        .addGap(18, 18, 18)
                        .addComponent(btnConsultarNota))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(btnInserirItem)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoverItem)
                        .addGap(18, 18, 18)
                        .addComponent(btnAlterarItem)
                        .addGap(18, 18, 18)
                        .addComponent(btnConsultarItem)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(txtTotalNota))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtDataNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(txtNumeroNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(cmbCodigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(txtNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(txtCpfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtEnderecoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRemoverNota)
                            .addComponent(btnInserirNota)
                            .addComponent(btnAlterarNota)
                            .addComponent(btnConsultarNota))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel13)
                                .addComponent(txtCodigoItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel11)
                                .addComponent(txtCodigoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtQuantidadeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRemoverItem)
                            .addComponent(btnInserirItem)
                            .addComponent(btnAlterarItem)
                            .addComponent(btnConsultarItem)
                            .addComponent(jLabel14)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtTotalNota)))
                .addGap(0, 20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        private void configurarComponentes() {
        // Configuração da tabela de itens
        tableModel = new DefaultTableModel(
            new Object[]{"Código", "Produto", "Quantidade", "Preço Unitário", "Total"}, 0);
        tblItensNota.setModel(tableModel);
        
        // Configura campos não editáveis
        txtTotalNota.setEditable(false);
        txtNomeCliente.setEditable(false);
        txtCpfCliente.setEditable(false);
        txtEnderecoCliente.setEditable(false);
        
// Adicione no método configurarComponentes():
tblItensNota.setDefaultRenderer(Double.class, new DefaultTableCellRenderer() {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, 
           boolean isSelected, boolean hasFocus, int row, int column) {
        if (value instanceof Double) {
            value = String.format("R$ %.2f", (Double) value);
        }
        return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
    }
});
    }

    private void carregarClientesNoCombo() {
        cmbCodigoCliente.removeAllItems();
        try {
            List<ModelCliente> clientes = clienteController.listarClientes();
            for (ModelCliente cliente : clientes) {
                cmbCodigoCliente.addItem(cliente.getA01_Codigo() + " - " + cliente.getA01_Nome());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar clientes: " + e.getMessage(), 
                "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void btnAlterarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarNotaActionPerformed
    if (txtNumeroNota.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, 
            "Consulte uma nota antes de alterar!", 
            "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // 1. Obter e validar número da nota
        int numeroNota;
        try {
            numeroNota = Integer.parseInt(txtNumeroNota.getText().trim());
        } catch (NumberFormatException e) {
            throw new Exception("Número da nota inválido!");
        }

        // 2. Obter a nota atual
        ModelPedido nota = pedidoController.consultarPedido(numeroNota);
        if (nota == null) {
            throw new Exception("Nota não encontrada!");
        }

        // 3. Validar cliente selecionado
        if (cmbCodigoCliente.getSelectedIndex() == -1) {
            throw new Exception("Selecione um cliente!");
        }

        // 4. Processar código do cliente
        String clienteSelecionado = (String) cmbCodigoCliente.getSelectedItem();
        int novoCodigoCliente;
        try {
            novoCodigoCliente = Integer.parseInt(clienteSelecionado.split(" - ")[0].trim());
        } catch (Exception e) {
            throw new Exception("Código do cliente inválido!");
        }

        // 5. Processar valor total (com tratamento para vírgula decimal)
        double novoValorTotal;
        try {
            String valorStr = txtTotalNota.getText().trim().replace(",", ".");
            novoValorTotal = Double.parseDouble(valorStr);
        } catch (NumberFormatException e) {
            throw new Exception("Valor total inválido!\nUse números com . ou , para decimais");
        }

        // 6. Validar data
        String dataNota = txtDataNota.getText().trim();
        if (dataNota.isEmpty()) {
            throw new Exception("Data da nota não pode estar vazia!");
        }

        // 7. Atualizar o objeto nota
        nota.setA01_Codigo_Cliente(novoCodigoCliente);
        nota.setA04_Valor_Total(novoValorTotal);
        nota.setA04_Data_Pedido(dataNota);

        // 8. Chamar o controller para atualizar
        pedidoController.atualizarPedido(nota);
        
        JOptionPane.showMessageDialog(this, 
            "Nota atualizada com sucesso!", 
            "Sucesso", JOptionPane.INFORMATION_MESSAGE);

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Erro ao atualizar nota:\n" + e.getMessage(), 
            "Erro", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnAlterarNotaActionPerformed

    private void txtNumeroNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroNotaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroNotaActionPerformed

    private void txtEnderecoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEnderecoClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEnderecoClienteActionPerformed

    private void txtDataNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataNotaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataNotaActionPerformed

    private void cmbCodigoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCodigoClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCodigoClienteActionPerformed

    private void txtNomeClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeClienteActionPerformed

    private void btnAlterarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarItemActionPerformed
int linhaSelecionada = tblItensNota.getSelectedRow();
    
if (linhaSelecionada == -1) {
    JOptionPane.showMessageDialog(this,
        "Selecione um item na tabela para alterar!",
        "Aviso", JOptionPane.WARNING_MESSAGE);
    return;
}

try {
    int codigoItem = (int) tblItensNota.getValueAt(linhaSelecionada, 0);
    int novaQuantidade = Integer.parseInt(txtQuantidadeProduto.getText());
    int numeroNota = Integer.parseInt(txtNumeroNota.getText());
    
    if (novaQuantidade <= 0) {
        JOptionPane.showMessageDialog(this,
            "Quantidade deve ser maior que zero!",
            "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    itemController.atualizarItem(codigoItem, novaQuantidade);
    
    carregarItensNota(numeroNota);
    atualizarTotalNota();
    
    JOptionPane.showMessageDialog(this,
        "Quantidade do item atualizada com sucesso!",
        "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this,
        "Dados inválidos!\nVerifique:\n" +
        "- Quantidade deve ser número inteiro",
        "Erro", JOptionPane.ERROR_MESSAGE);
} catch (Exception e) {
    JOptionPane.showMessageDialog(this,
        "Erro ao atualizar item: " + e.getMessage(),
        "Erro", JOptionPane.ERROR_MESSAGE);
}
atualizarTotalNota();
    }//GEN-LAST:event_btnAlterarItemActionPerformed

    private void btnInserirNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirNotaActionPerformed
if (cmbCodigoCliente.getSelectedIndex() == -1) {
    JOptionPane.showMessageDialog(this, "Selecione um cliente!", 
        "Aviso", JOptionPane.WARNING_MESSAGE);
    return;
}

try {
    String clienteSelecionado = (String) cmbCodigoCliente.getSelectedItem();
    int codigoCliente = Integer.parseInt(clienteSelecionado.split(" - ")[0].trim());

    double valorTotal = 0.0;
    for (int i = 0; i < tableModel.getRowCount(); i++) {
        int quantidade = (int) tableModel.getValueAt(i, 2); 
        double precoUnitario = (double) tableModel.getValueAt(i, 3); 
        valorTotal += quantidade * precoUnitario;
    }

    ModelPedido pedido = new ModelPedido();
    pedido.setA01_Codigo_Cliente(codigoCliente);
    pedido.setA04_Valor_Total(valorTotal);
    pedido.setA04_Data_Pedido(new SimpleDateFormat("dd/MM/yyyy").format(new Date()));

    pedidoController.inserirPedido(
        pedido.getA01_Codigo_Cliente(),
        pedido.getA04_Valor_Total()
    );

    limparCamposNota(); 

} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, 
        "Formato inválido no código do cliente!",
        "Erro", JOptionPane.ERROR_MESSAGE);
} catch (Exception e) {
    JOptionPane.showMessageDialog(this, 
        "Erro ao cadastrar nota:\n" + e.getMessage(), 
        "Erro", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_btnInserirNotaActionPerformed

    private void btnRemoverNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverNotaActionPerformed
        if (txtNumeroNota.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Consulte uma nota antes de remover!", 
                "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Tem certeza que deseja remover esta nota fiscal?",
            "Confirmação",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                int numeroNota = Integer.parseInt(txtNumeroNota.getText());
                pedidoController.removerPedido(numeroNota);
                JOptionPane.showMessageDialog(this, "Nota removida com sucesso!", 
                    "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                limparCamposNota();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao remover nota: " + e.getMessage(), 
                    "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRemoverNotaActionPerformed

    private void btnConsultarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarNotaActionPerformed
        if (txtNumeroNota.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Digite um número de nota para consultar!", 
                "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int numeroNota = Integer.parseInt(txtNumeroNota.getText());
            ModelPedido nota = pedidoController.consultarPedido(numeroNota);

            if (nota != null) {
                preencherCamposNota(nota);
                carregarItensNota(numeroNota);
            } else {
                JOptionPane.showMessageDialog(this, "Nota não encontrada!", 
                    "Informação", JOptionPane.INFORMATION_MESSAGE);
                limparCamposNota();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Número de nota inválido!", 
                "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro na consulta: " + e.getMessage(), 
                "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConsultarNotaActionPerformed
private void preencherCamposNota(ModelPedido nota) {
    if (nota == null) {
    JOptionPane.showMessageDialog(this, "Nota inválida!");
    return;
    }
    
        String data = nota.getA04_Data_Pedido();
    if (data == null || data.trim().isEmpty()) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        data = sdf.format(new Date());
    }
    
    txtNumeroNota.setText(String.valueOf(nota.getA04_Codigo()));
    txtDataNota.setText(data);
    txtTotalNota.setText(String.format("%.2f", nota.getA04_Valor_Total()));
    
    // Preenche os dados do cliente (se existir)
    ModelCliente cliente = clienteController.consultarCliente(nota.getA01_Codigo_Cliente());
    if (cliente != null) {
        txtNomeCliente.setText(cliente.getA01_Nome());
        txtCpfCliente.setText(cliente.getA01_Cpf());
        txtEnderecoCliente.setText(cliente.getA01_Endereco());
        
        String clienteComboText = cliente.getA01_Codigo() + " - " + cliente.getA01_Nome();
        for (int i = 0; i < cmbCodigoCliente.getItemCount(); i++) {
            if (cmbCodigoCliente.getItemAt(i).equals(clienteComboText)) {
                cmbCodigoCliente.setSelectedIndex(i);
                break;
            }
        }
    } else {
        // Limpa os campos se o cliente não for encontrado (opcional)
        txtNomeCliente.setText("");
        txtCpfCliente.setText("");
        txtEnderecoCliente.setText("");
    }
}

private void carregarItensNota(int numeroNota) {
    if (numeroNota <= 0) {
    JOptionPane.showMessageDialog(this, "Número da nota inválido!");
    return;
}
    try {
        // Limpa a tabela antes de carregar os itens
        tableModel.setRowCount(0);
        
        // Obtém a lista de itens da nota
        List<ModelItem> itens = itemController.listarItensPorNota(numeroNota);
        
        if (itens.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nenhum item encontrado para esta nota", 
                "Informação", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Preenche a tabela com os itens
        for (ModelItem item : itens) {
            // Consulta o produto relacionado ao item
            ModelProduto produto = produtoController.consultarProduto(item.getA02_Codigo());
            
            // Adiciona uma linha na tabela para cada item
            tableModel.addRow(new Object[]{
                item.getA03_Codigo(),
                produto != null ? produto.getA02_Nome() : "Produto não encontrado",
                item.getA03_Quantidade(),
                item.getA03_Preco_Unitario(), // Mantém como Double
                item.getA03_Quantidade() * item.getA03_Preco_Unitario() // Mantém como Double
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar itens: " + e.getMessage(), 
            "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
private void atualizarTotalNota() {
    try {
        double total = 0.0;
        
        // Percorre todas as linhas da tabela
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            // Obtém quantidade e preço unitário da linha atual
            int quantidade = (int) tableModel.getValueAt(i, 2); // Coluna 2 = quantidade
            double precoUnitario = (double) tableModel.getValueAt(i, 3); // Coluna 3 = preço
            
            // Soma ao total (quantidade * preço unitário)
            total += quantidade * precoUnitario;
        }
        
        // Atualiza o campo de total com o valor calculado
        txtTotalNota.setText(String.format("%.2f", total));
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Erro ao calcular total da nota: " + e.getMessage(),
            "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

    private void limparCamposNota() {
        txtNumeroNota.setText("");
        txtDataNota.setText("");
        txtTotalNota.setText("");
        txtNomeCliente.setText("");
        txtCpfCliente.setText("");
        txtEnderecoCliente.setText("");
        tableModel.setRowCount(0);
    }

    private void limparCamposItem() {
        txtCodigoProduto.setText("");
        txtQuantidadeProduto.setText("");
    }
    
    private void configurarDataAutomatica() {
    // Formata a data atual no padrão dd/MM/yyyy
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    txtDataNota.setText(sdf.format(new Date()));
    txtDataNota.setEditable(false);
    }
    private void btnInserirItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirItemActionPerformed
if (txtNumeroNota.getText().trim().isEmpty()) {
    JOptionPane.showMessageDialog(this, 
        "Informe o número da nota primeiro!",
        "Aviso", JOptionPane.WARNING_MESSAGE);
    return;
}

if (txtCodigoProduto.getText().trim().isEmpty() || 
    txtQuantidadeProduto.getText().trim().isEmpty()) {
    JOptionPane.showMessageDialog(this, 
        "Preencha o código do produto e a quantidade!",
        "Aviso", JOptionPane.WARNING_MESSAGE);
    return;
}

try {
    // Converte os dados para números
    int numeroNota = Integer.parseInt(txtNumeroNota.getText());
    int codigoProduto = Integer.parseInt(txtCodigoProduto.getText());
    int quantidade = Integer.parseInt(txtQuantidadeProduto.getText());

    // Valida a quantidade
    if (quantidade <= 0) {
        JOptionPane.showMessageDialog(this, 
            "Quantidade deve ser maior que zero!",
            "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        itemController.inserirItem(numeroNota, codigoProduto, quantidade);
        
        carregarItensNota(numeroNota);  
        atualizarTotalNota();           
        limparCamposItem();
        
    } catch (RuntimeException e) {
        JOptionPane.showMessageDialog(this, 
            "Erro: " + e.getMessage(),
            "Erro", JOptionPane.ERROR_MESSAGE);
    }

} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, 
        "Dados inválidos!\nVerifique:\n" +
        "- Código do produto deve ser número\n" +
        "- Quantidade deve ser número inteiro",
        "Erro", JOptionPane.ERROR_MESSAGE);
} catch (Exception e) {
    JOptionPane.showMessageDialog(this, 
        "Erro ao inserir item:\n" + e.getMessage(),
        "Erro", JOptionPane.ERROR_MESSAGE);
}
atualizarTotalNota();
    }//GEN-LAST:event_btnInserirItemActionPerformed

    private void btnRemoverItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverItemActionPerformed
    int linhaSelecionada = tblItensNota.getSelectedRow();
    
    if (linhaSelecionada == -1) {
        JOptionPane.showMessageDialog(this, 
            "Selecione um item na tabela para remover!",
            "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        int codigoItem = (int) tblItensNota.getValueAt(linhaSelecionada, 0);
        int numeroNota = Integer.parseInt(txtNumeroNota.getText());
        
        int confirmacao = JOptionPane.showConfirmDialog(this,
            "Tem certeza que deseja remover este item?",
            "Confirmação", JOptionPane.YES_NO_OPTION);
        
        if (confirmacao == JOptionPane.YES_OPTION) {
            itemController.removerItem(codigoItem);
            carregarItensNota(numeroNota);
            atualizarTotalNota();
            
            JOptionPane.showMessageDialog(this,
                "Item removido com sucesso!",
                "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        }
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this,
            "Erro ao remover item: " + e.getMessage(),
            "Erro", JOptionPane.ERROR_MESSAGE);
    }
    atualizarTotalNota();
    }//GEN-LAST:event_btnRemoverItemActionPerformed

    private void btnConsultarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarItemActionPerformed
    if (txtCodigoItem.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this,
            "Informe o código do item para consultar!",
            "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        int codigoItem = Integer.parseInt(txtCodigoItem.getText());
        ModelItem item = itemController.consultarItem(codigoItem);
        
        if (item != null) {
            // Preenche os campos
            txtNumeroNota.setText(String.valueOf(item.getA04_Codigo()));
            txtCodigoProduto.setText(String.valueOf(item.getA02_Codigo()));
            txtQuantidadeProduto.setText(String.valueOf(item.getA03_Quantidade()));
            
            // Seleciona na tabela se existir
            for (int i = 0; i < tblItensNota.getRowCount(); i++) {
                if (((int) tblItensNota.getValueAt(i, 0)) == codigoItem) {
                    tblItensNota.setRowSelectionInterval(i, i);
                    break;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                "Item não encontrado!",
                "Informação", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this,
            "Código do item deve ser um número válido!",
            "Erro", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this,
            "Erro na consulta: " + e.getMessage(),
            "Erro", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnConsultarItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewNota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewNota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewNota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewNota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewNota().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterarItem;
    private javax.swing.JButton btnAlterarNota;
    private javax.swing.JButton btnConsultarItem;
    private javax.swing.JButton btnConsultarNota;
    private javax.swing.JButton btnInserirItem;
    private javax.swing.JButton btnInserirNota;
    private javax.swing.JButton btnRemoverItem;
    private javax.swing.JButton btnRemoverNota;
    private javax.swing.JComboBox<String> cmbCodigoCliente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblItensNota;
    private javax.swing.JTextField txtCodigoItem;
    private javax.swing.JTextField txtCodigoProduto;
    private javax.swing.JTextField txtCpfCliente;
    private javax.swing.JTextField txtDataNota;
    private javax.swing.JTextField txtEnderecoCliente;
    private javax.swing.JTextField txtNomeCliente;
    private javax.swing.JTextField txtNumeroNota;
    private javax.swing.JTextField txtQuantidadeProduto;
    private javax.swing.JTextField txtTotalNota;
    // End of variables declaration//GEN-END:variables
}
